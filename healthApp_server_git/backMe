const express = require("express");
const mysql = require('mysql');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const session = require('express-session');
const bodyParser = require('body-parser');

const app = express();

// CORS configuration
app.use(cors({
    origin: 'http://localhost:5173', // Update this to match your frontend origin
    methods: ["POST", "GET", "PUT", "DELETE", "PATCH"],
    credentials: true // Allows cookies to be sent with requests
}));

app.use(express.json());
app.use(express.static('public'));
app.use(cookieParser());
app.use(bodyParser.json());

app.use(session({
    secret: 'secrete',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: false, // Set to true in production with HTTPS
        maxAge: 1000 * 60 * 60 * 24
    }
}));

//connection established
const db = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "",
    database: "healthapp"
});

db.connect((err) => {
    if (err) {
        console.error('Error connecting to database: ', err);
        return;
    }
    console.log('Connected to the database');
});

app.get('/user', (req, res) => {
    if (req.session.userId && req.session.role && req.session.username && req.session.email) {
        // console.log(`User email: ${req.session.email}`);
        return res.json({
            valid: true,
            userId: req.session.userId,
            role: req.session.role,
            username: req.session.username,
            email: req.session.email
        });
    } else {
        return res.json({ valid: false });
    }
});
app.post('/signup', (req, res) => {
    const checkEmailQuery = "SELECT email FROM users WHERE email = ?";
    const insertUserQuery = "INSERT INTO users (username, email, password_hash, role) VALUES (?, ?, ?, ?)"; // No hash here
    const values = [
        req.body.name,
        req.body.email,
        req.body.password, // Store the plain password
        req.body.role
    ];

    db.query(checkEmailQuery, [req.body.email], (err, result) => {
        if (err) {
            console.error("Error occurred during signup:", err);
            return res.status(500).json({ error: "An error occurred during signup" });
        }

        if (result.length > 0) {
            return res.status(400).json({ error: "Email already exists. Please use a different email address." });
        }

        db.query(insertUserQuery, values, (err, result) => {
            if (err) {
                console.error("Error occurred during signup:", err);
                return res.status(500).json({ error: "An error occurred during signup" });
            }
            return res.status(200).json({ message: "Signup successful", result });
        });
    });
});
app.post('/login', (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ message: "Email and password are required" });
    }

    const sql = "SELECT id, role, username, email FROM users WHERE email = ? AND password_hash = ?";
    db.query(sql, [email, password], (err, result) => {
        if (err) {
            console.error("Error executing SQL query:", err);
            return res.status(500).json({ message: "Internal server error" });
        }

        if (result.length > 0) {
            req.session.username = result[0].username;
            req.session.userId = result[0].id;
            req.session.role = result[0].role;
            req.session.email = result[0].email;

            // Log session data
            // console.log("Session Data:");
            // console.log(`User ID: ${req.session.userId}`);
            // console.log(`Username: ${req.session.username}`);
            // console.log(`Role: ${req.session.role}`);
            // console.log(`Email: ${req.session.email}`);

            return res.json({ login: true, message: "Login successful" });
        } else {
            return res.status(401).json({ login: false, message: "Invalid email or password" });
        }
    });
});
app.post('/logout', (req, res) => {
    req.session.destroy(err => {
        if (err) {
            console.error("Error destroying session:", err);
            return res.status(500).json({ message: "Internal server error" });
        }
        res.clearCookie('connect.sid'); // Clear the session cookie
        res.json({ message: "Logged out successfully" });
    });
});



// // Endpoint to get appointments
app.get('/api/patient_appointments', (req, res) => {
    const sql = "SELECT id, name, email, reason, created_at, preferred_datetime FROM patient_appointments";
    db.query(sql, (err, result) => {
        if (err) {
            console.error("Error executing SQL query:", err);
            return res.status(500).json({ message: "Internal server error" });
        }

        return res.json(result);
    });
});                    

app.get('/api/users', (req, res) => {
    const sql = "SELECT id, username,created_at, role, email FROM users";
    db.query(sql, (err, result) => {
      if (err) {
        console.error("Error executing SQL query:", err);
        return res.status(500).json({ message: "Internal server error" });
      }
      res.json(result);
    });
  });
  


app.listen(8085, () => {
    console.log("Server is running on port 8085");
});
